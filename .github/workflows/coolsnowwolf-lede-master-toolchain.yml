#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Coolsnowwolf/Lede Toolchain Build
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'true'
#  schedule:
#    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        PLATFORM: [x86/64]

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set +e
          docker rmi `docker images -q`
          echo "Deleting files, please wait ..."
          sudo rm -rf \
            /usr/share/dotnet \
            /etc/mysql \
            /etc/php
          sudo -E apt-get -y purge \
            azure-cli \
            ghc* \
            zulu* \
            hhvm \
            llvm* \
            firefox \
            google* \
            dotnet* \
            powershell \
            openjdk* \
            mysql* \
            php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 cmake gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          export REPO_USER="$(echo $REPO_URL | awk -F '/' '{print $(NF-1)}')"
          echo "REPO_USER=$REPO_USER" >> $GITHUB_ENV
          export REPO_NAME="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Install Feeds
        id: feeds
        run: |
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          echo "src-git kiddin9 https://github.com/kiddin9/openwrt-packages.git" >> ./feeds.conf.default
          ./scripts/feeds update -a 
          rm -rf feeds/luci/themes/luci-theme-argon
          cd feeds/kiddin9
          rm -rf homeproxy luci-app-acme luci-app-aliddns luci-app-apinger luci-app-bitsrunlogin-go luci-app-keepalived luci-app-lorawan-basicstation luci-app-oscam luci-app-unblockneteasemusic luci-app-unblockneteasemusic-go
          ./scripts/feeds install -a
          ./scripts/feeds install -a

      - name: Import external feeds - sirpdboy-package...
        working-directory: ./openwrt
        run: |
          git clone  https://github.com/kenzok8/openwrt-packages.git package/kenzo
          git clone https://github.com/sirpdboy/sirpdboy-package package/sirpdboy
          mkdir package/crarm
          cp -r package/kenzo/luci-app-argonne-config package/crarm/luci-app-argonne-config
          cp -r package/kenzo/luci-app-ikoolproxy package/crarm/luci-app-ikoolproxy
          cp -r package/kenzo/luci-app-koolproxyR package/crarm/luci-app-koolproxyR
          cp -r package/kenzo/luci-theme-argon package/crarm/luci-theme-argon
          cp -r package/kenzo/luci-theme-argonne package/crarm/luci-theme-argonne
          cp -r package/kenzo/luci-theme-atmaterial_new package/crarm/luci-theme-atmaterial_new
          cp -r package/kenzo/luci-theme-ifit package/crarm/luci-theme-ifit
          cp -r package/kenzo/luci-theme-mcat package/crarm/luci-theme-mcat
          cp -r package/kenzo/luci-theme-neobird package/crarm/luci-theme-neobird
          cp -r package/kenzo/luci-theme-opentopd package/crarm/luci-theme-opentopd
          cp -r package/kenzo/luci-theme-tomato package/crarm/luci-theme-tomato
          cp -r package/sirpdboy/luci-app-poweroffdevice package/crarm/luci-app-poweroffdevice
          cp -r package/sirpdboy/luci-app-rebootschedule package/crarm/luci-app-rebootschedule
          cp -r package/sirpdboy/luci-app-switch-lan-play package/crarm/luci-app-switch-lan-play
          cp -r package/sirpdboy/switch-lan-play package/crarm/switch-lan-play
          cp -r package/sirpdboy/luci-theme-btmod package/crarm/luci-theme-btmod
          cp -r package/sirpdboy/luci-theme-opentomato package/crarm/luci-theme-opentomato
          cp -r package/sirpdboy/luci-theme-opentomcat package/crarm/luci-theme-opentomcat
          rm -rf package/kenzo
          rm -rf package/sirpdboy

      - name: make config
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        id: download
        run: |
          mv config/$PLATFORM.config $OPENWRTROOT/.config
          cd $OPENWRTROOT
          make defconfig
          
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          
      - name: Download Packages
        run: |
          cd $OPENWRTROOT
          make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
      
      - name: Compile Tools
        id: tools
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Toolchain
        id: toolchain
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          make diffconfig
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          cd *
          rm *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV

      - name: Clean Files
        id: clean
        run: |
          cd $OPENWRTROOT
          make clean
          rm -rf tmp logs .config*  package/crarm/*
          ./scripts/feeds clean

      - name: Generate Toolchain Image
        id: generate
        run: |
          export FILE_NAME="toolchain-image-$REPO_USER-$REPO_NAME-$REPO_BRANCH-$TARGET-$SUBTARGET.img"
          mksquashfs openwrt $FILE_NAME -force-gid 1001 -force-uid 1001 -comp xz
          mkdir output
          mv $FILE_NAME output
          echo "::set-output name=RELEASE_TAG::$REPO_USER-$REPO_NAME-$REPO_BRANCH"
          df -hT $PWD

      - name: Upload Image To Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate.outputs.RELEASE_TAG }}
          files: output/*
